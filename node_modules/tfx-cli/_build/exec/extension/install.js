"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var args = require("../../lib/arguments");
var colors = require("colors");
var extBase = require("./default");
var extInfo = require("./_lib/extensioninfo");
var trace = require("../../lib/trace");
var SPS_INSTANCE_TYPE = "951917AC-A960-4999-8464-E3F0AA25B381";
function getCommand(args) {
    return new ExtensionInstall(args);
}
exports.getCommand = getCommand;
var AccountInstallReport = /** @class */ (function () {
    function AccountInstallReport(itemId, accountName, accountId, installed, reason) {
        if (installed === void 0) { installed = false; }
        this.itemId = itemId;
        this.accountName = accountName;
        this.accountId = accountId;
        this.installed = installed;
        this.reason = reason;
    }
    AccountInstallReport.prototype.setError = function (reason) {
        this.installed = false;
        this.reason = reason;
    };
    AccountInstallReport.prototype.setInstalled = function (reason) {
        this.installed = true;
        this.reason = reason;
    };
    return AccountInstallReport;
}());
exports.AccountInstallReport = AccountInstallReport;
var ExtensionInstall = /** @class */ (function (_super) {
    __extends(ExtensionInstall, _super);
    function ExtensionInstall(passedArgs) {
        var _this = _super.call(this, passedArgs) || this;
        _this.description = "Install a Visual Studio Services Extension to a list of VSTS Accounts.";
        _this.serverCommand = true;
        return _this;
    }
    ExtensionInstall.prototype.setCommandArgs = function () {
        _super.prototype.setCommandArgs.call(this);
        this.registerCommandArgument("accounts", "Installation target accounts", "List of accounts where to install the extension.", args.ArrayArgument, null, true);
    };
    ExtensionInstall.prototype.getHelpArgs = function () {
        return ["publisher", "extensionId", "vsix", "accounts"];
    };
    ExtensionInstall.prototype.exec = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var result, extensionInfo, extInfo, itemId, galleryApi, accounts, installations, _i, installations_1, installation, account, installedExtension, installationResult, serviceUrl, emsApi, installation, installationResult, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = { accounts: {}, extension: null };
                        return [4 /*yield*/, this._getExtensionInfo()];
                    case 1:
                        extensionInfo = _a.sent();
                        return [4 /*yield*/, this._getExtensionInfo()];
                    case 2:
                        extInfo = _a.sent();
                        itemId = extInfo.publisher + "." + extInfo.id;
                        galleryApi = this.webApi.getGalleryApi(this.webApi.serverUrl);
                        result.extension = itemId;
                        return [4 /*yield*/, this.commandArgs.accounts.val(true)];
                    case 3:
                        accounts = _a.sent();
                        if (!accounts) return [3 /*break*/, 5];
                        return [4 /*yield*/, Promise.all(accounts.slice().map(function (account) { return __awaiter(_this, void 0, void 0, function () {
                                var emsApi, installation;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            emsApi = this.webApi.getExtensionManagementApi(this.getEmsAccountUrl(this.webApi.serverUrl, account));
                                            return [4 /*yield*/, emsApi.installExtensionByName(extInfo.publisher, extInfo.id)];
                                        case 1:
                                            installation = _a.sent();
                                            return [2 /*return*/, [account, installation]];
                                    }
                                });
                            }); }))];
                    case 4:
                        installations = _a.sent();
                        for (_i = 0, installations_1 = installations; _i < installations_1.length; _i++) {
                            installation = installations_1[_i];
                            account = installation[0];
                            installedExtension = installation[1];
                            installationResult = { installed: true, issues: null };
                            if (installedExtension.installState.installationIssues &&
                                installedExtension.installState.installationIssues.length > 0) {
                                installationResult.installed = false;
                                installationResult.issues = "The following issues were encountered installing to " + account + ": \n" + installedExtension.installState.installationIssues.map(function (i) { return " - " + i; }).join("\n");
                            }
                            result.accounts[account] = installationResult;
                        }
                        return [3 /*break*/, 10];
                    case 5: return [4 /*yield*/, this.commandArgs.serviceUrl.val()];
                    case 6:
                        serviceUrl = (_a.sent()).replace(".visualstudio.com", ".extmgmt.visualstudio.com");
                        emsApi = this.webApi.getExtensionManagementApi(serviceUrl);
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, emsApi.installExtensionByName(extInfo.publisher, extInfo.id)];
                    case 8:
                        installation = _a.sent();
                        installationResult = { installed: true, issues: null };
                        if (installation.installState.installationIssues && installation.installState.installationIssues.length > 0) {
                            installationResult.installed = false;
                            installationResult.issues = "The following issues were encountered installing to " + serviceUrl + ": \n" + installation.installState.installationIssues.map(function (i) { return " - " + i; }).join("\n");
                        }
                        result.accounts[serviceUrl] = installationResult;
                        return [3 /*break*/, 10];
                    case 9:
                        err_1 = _a.sent();
                        if (err_1.message.indexOf("TF400856") >= 0) {
                            throw new Error("Failed to install extension (TF400856). Ensure service-url includes a collection name, e.g. " + serviceUrl.replace(/\/$/, "") + "/DefaultCollection");
                        }
                        else {
                            throw err_1;
                        }
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/, result];
                }
            });
        });
    };
    ExtensionInstall.prototype.getEmsAccountUrl = function (marketplaceUrl, accountName) {
        if (marketplaceUrl.toLocaleLowerCase().indexOf("marketplace.visualstudio.com") >= 0) {
            return "https://" + accountName + ".extmgmt.visualstudio.com";
        }
        if (marketplaceUrl.toLocaleLowerCase().indexOf("me.tfsallin.net") >= 0) {
            return marketplaceUrl.toLocaleLowerCase().indexOf("https://") === 0
                ? "https://" + accountName + ".me.tfsallin.net:8781"
                : "http://" + accountName + ".me.tfsallin.net:8780";
        }
        return marketplaceUrl;
    };
    ExtensionInstall.prototype.friendlyOutput = function (data) {
        trace.success("\n=== Completed operation: install extension ===");
        Object.keys(data.accounts).forEach(function (a) {
            trace.info("- " + a + ": " + (data.accounts[a].installed ? colors.green("success") : colors.red(data.accounts[a].issues)));
        });
    };
    ExtensionInstall.prototype._getExtensionInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var vsixPath, extInfoPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.commandArgs.vsix.val(true)];
                    case 1:
                        vsixPath = _a.sent();
                        if (vsixPath !== null) {
                            extInfoPromise = extInfo.getExtInfo(vsixPath[0], null, null);
                        }
                        else {
                            extInfoPromise = Promise.all([this.commandArgs.publisher.val(), this.commandArgs.extensionId.val()]).then(function (values) {
                                var publisher = values[0], extension = values[1];
                                return extInfo.getExtInfo(null, extension, publisher);
                            });
                        }
                        return [2 /*return*/, extInfoPromise];
                }
            });
        });
    };
    return ExtensionInstall;
}(extBase.ExtensionBase));
exports.ExtensionInstall = ExtensionInstall;
//# sourceMappingURL=install.js.map